# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Profiles(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, id: int=None, is_robot: bool=None, name: str=None, waifu_image_url: str=None, hearts: int=None, implants: int=None):  # noqa: E501
        """Profiles - a model defined in Swagger

        :param id: The id of this Profiles.  # noqa: E501
        :type id: int
        :param is_robot: The is_robot of this Profiles.  # noqa: E501
        :type is_robot: bool
        :param name: The name of this Profiles.  # noqa: E501
        :type name: str
        :param waifu_image_url: The waifu_image_url of this Profiles.  # noqa: E501
        :type waifu_image_url: str
        :param hearts: The hearts of this Profiles.  # noqa: E501
        :type hearts: int
        :param implants: The implants of this Profiles.  # noqa: E501
        :type implants: int
        """
        self.swagger_types = {
            'id': int,
            'is_robot': bool,
            'name': str,
            'waifu_image_url': str,
            'hearts': int,
            'implants': int
        }

        self.attribute_map = {
            'id': 'id',
            'is_robot': 'is_robot',
            'name': 'name',
            'waifu_image_url': 'waifu_image_url',
            'hearts': 'hearts',
            'implants': 'implants'
        }

        self._id = id
        self._is_robot = is_robot
        self._name = name
        self._waifu_image_url = waifu_image_url
        self._hearts = hearts
        self._implants = implants

    @classmethod
    def from_dict(cls, dikt) -> 'Profiles':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The profiles of this Profiles.  # noqa: E501
        :rtype: Profiles
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """Gets the id of this Profiles.


        :return: The id of this Profiles.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this Profiles.


        :param id: The id of this Profiles.
        :type id: int
        """

        self._id = id

    @property
    def is_robot(self) -> bool:
        """Gets the is_robot of this Profiles.


        :return: The is_robot of this Profiles.
        :rtype: bool
        """
        return self._is_robot

    @is_robot.setter
    def is_robot(self, is_robot: bool):
        """Sets the is_robot of this Profiles.


        :param is_robot: The is_robot of this Profiles.
        :type is_robot: bool
        """

        self._is_robot = is_robot

    @property
    def name(self) -> str:
        """Gets the name of this Profiles.


        :return: The name of this Profiles.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Profiles.


        :param name: The name of this Profiles.
        :type name: str
        """

        self._name = name

    @property
    def waifu_image_url(self) -> str:
        """Gets the waifu_image_url of this Profiles.


        :return: The waifu_image_url of this Profiles.
        :rtype: str
        """
        return self._waifu_image_url

    @waifu_image_url.setter
    def waifu_image_url(self, waifu_image_url: str):
        """Sets the waifu_image_url of this Profiles.


        :param waifu_image_url: The waifu_image_url of this Profiles.
        :type waifu_image_url: str
        """

        self._waifu_image_url = waifu_image_url

    @property
    def hearts(self) -> int:
        """Gets the hearts of this Profiles.


        :return: The hearts of this Profiles.
        :rtype: int
        """
        return self._hearts

    @hearts.setter
    def hearts(self, hearts: int):
        """Sets the hearts of this Profiles.


        :param hearts: The hearts of this Profiles.
        :type hearts: int
        """

        self._hearts = hearts

    @property
    def implants(self) -> int:
        """Gets the implants of this Profiles.


        :return: The implants of this Profiles.
        :rtype: int
        """
        return self._implants

    @implants.setter
    def implants(self, implants: int):
        """Sets the implants of this Profiles.


        :param implants: The implants of this Profiles.
        :type implants: int
        """

        self._implants = implants
