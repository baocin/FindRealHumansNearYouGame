/*
 * TIELIN
 * Tech is evil Love is not
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.9
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Tielin);
  }
}(this, function(expect, Tielin) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Tielin.DefaultApi();
  });

  describe('(package)', function() {
    describe('DefaultApi', function() {
      describe('createlikes', function() {
        it('should call createlikes successfully', function(done) {
          // TODO: uncomment, update parameter values for createlikes call
          /*
          var body = new Tielin.Likes();
          body.sourcePlayerId = 0;
          body.destPlayerId = 0;
          body.roundNum = 0;
          body.action = "";

          instance.createlikes(body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createpickupLines', function() {
        it('should call createpickupLines successfully', function(done) {
          // TODO: uncomment, update parameter values for createpickupLines call
          /*
          var body = new Tielin.PickupLines();
          body.playerId = 0;
          body.roundNum = 0;
          body.earnedSwipesLeft = "";
          body.earnedSwipesRight = "";
          body.humanWords = "";
          body.robotWords = "";

          instance.createpickupLines(body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createprofiles', function() {
        it('should call createprofiles successfully', function(done) {
          // TODO: uncomment, update parameter values for createprofiles call
          /*
          var body = new Tielin.Profiles();
          body.id = 0;
          body.isRobot = false;
          body.name = "";
          body.waifuImageUrl = "";
          body.hearts = 0;
          body.implants = 0;

          instance.createprofiles(body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deletelikes', function() {
        it('should call deletelikes successfully', function(done) {
          // TODO: uncomment, update parameter values for deletelikes call
          /*
          var likesId = "likesId_example";

          instance.deletelikes(likesId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deletepickupLines', function() {
        it('should call deletepickupLines successfully', function(done) {
          // TODO: uncomment, update parameter values for deletepickupLines call
          /*
          var pickupLinesId = "pickupLinesId_example";

          instance.deletepickupLines(pickupLinesId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteprofiles', function() {
        it('should call deleteprofiles successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteprofiles call
          /*
          var profilesId = "profilesId_example";

          instance.deleteprofiles(profilesId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getalllikes', function() {
        it('should call getalllikes successfully', function(done) {
          // TODO: uncomment getalllikes call and complete the assertions
          /*

          instance.getalllikes(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(Tielin.Likes);
              expect(data.sourcePlayerId).to.be.a('number');
              expect(data.sourcePlayerId).to.be(0);
              expect(data.destPlayerId).to.be.a('number');
              expect(data.destPlayerId).to.be(0);
              expect(data.roundNum).to.be.a('number');
              expect(data.roundNum).to.be(0);
              expect(data.action).to.be.a('string');
              expect(data.action).to.be("");
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getallpickupLines', function() {
        it('should call getallpickupLines successfully', function(done) {
          // TODO: uncomment getallpickupLines call and complete the assertions
          /*

          instance.getallpickupLines(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(Tielin.PickupLines);
              expect(data.playerId).to.be.a('number');
              expect(data.playerId).to.be(0);
              expect(data.roundNum).to.be.a('number');
              expect(data.roundNum).to.be(0);
              expect(data.earnedSwipesLeft).to.be.a('string');
              expect(data.earnedSwipesLeft).to.be("");
              expect(data.earnedSwipesRight).to.be.a('string');
              expect(data.earnedSwipesRight).to.be("");
              expect(data.humanWords).to.be.a('string');
              expect(data.humanWords).to.be("");
              expect(data.robotWords).to.be.a('string');
              expect(data.robotWords).to.be("");
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getallprofiles', function() {
        it('should call getallprofiles successfully', function(done) {
          // TODO: uncomment getallprofiles call and complete the assertions
          /*

          instance.getallprofiles(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(Tielin.Profiles);
              expect(data.id).to.be.a('number');
              expect(data.id).to.be(0);
              expect(data.isRobot).to.be.a('boolean');
              expect(data.isRobot).to.be(false);
              expect(data.name).to.be.a('string');
              expect(data.name).to.be("");
              expect(data.waifuImageUrl).to.be.a('string');
              expect(data.waifuImageUrl).to.be("");
              expect(data.hearts).to.be.a('number');
              expect(data.hearts).to.be(0);
              expect(data.implants).to.be.a('number');
              expect(data.implants).to.be(0);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getlikes', function() {
        it('should call getlikes successfully', function(done) {
          // TODO: uncomment, update parameter values for getlikes call and complete the assertions
          /*
          var likesId = "likesId_example";

          instance.getlikes(likesId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Tielin.Likes);
            expect(data.sourcePlayerId).to.be.a('number');
            expect(data.sourcePlayerId).to.be(0);
            expect(data.destPlayerId).to.be.a('number');
            expect(data.destPlayerId).to.be(0);
            expect(data.roundNum).to.be.a('number');
            expect(data.roundNum).to.be(0);
            expect(data.action).to.be.a('string');
            expect(data.action).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getpickupLines', function() {
        it('should call getpickupLines successfully', function(done) {
          // TODO: uncomment, update parameter values for getpickupLines call and complete the assertions
          /*
          var pickupLinesId = "pickupLinesId_example";

          instance.getpickupLines(pickupLinesId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Tielin.PickupLines);
            expect(data.playerId).to.be.a('number');
            expect(data.playerId).to.be(0);
            expect(data.roundNum).to.be.a('number');
            expect(data.roundNum).to.be(0);
            expect(data.earnedSwipesLeft).to.be.a('string');
            expect(data.earnedSwipesLeft).to.be("");
            expect(data.earnedSwipesRight).to.be.a('string');
            expect(data.earnedSwipesRight).to.be("");
            expect(data.humanWords).to.be.a('string');
            expect(data.humanWords).to.be("");
            expect(data.robotWords).to.be.a('string');
            expect(data.robotWords).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getprofiles', function() {
        it('should call getprofiles successfully', function(done) {
          // TODO: uncomment, update parameter values for getprofiles call and complete the assertions
          /*
          var profilesId = "profilesId_example";

          instance.getprofiles(profilesId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Tielin.Profiles);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(0);
            expect(data.isRobot).to.be.a('boolean');
            expect(data.isRobot).to.be(false);
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.waifuImageUrl).to.be.a('string');
            expect(data.waifuImageUrl).to.be("");
            expect(data.hearts).to.be.a('number');
            expect(data.hearts).to.be(0);
            expect(data.implants).to.be.a('number');
            expect(data.implants).to.be(0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updatelikes', function() {
        it('should call updatelikes successfully', function(done) {
          // TODO: uncomment, update parameter values for updatelikes call
          /*
          var likesId = "likesId_example";
          var body = new Tielin.Likes();
          body.sourcePlayerId = 0;
          body.destPlayerId = 0;
          body.roundNum = 0;
          body.action = "";

          instance.updatelikes(likesId, body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updatepickupLines', function() {
        it('should call updatepickupLines successfully', function(done) {
          // TODO: uncomment, update parameter values for updatepickupLines call
          /*
          var pickupLinesId = "pickupLinesId_example";
          var body = new Tielin.PickupLines();
          body.playerId = 0;
          body.roundNum = 0;
          body.earnedSwipesLeft = "";
          body.earnedSwipesRight = "";
          body.humanWords = "";
          body.robotWords = "";

          instance.updatepickupLines(pickupLinesId, body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateprofiles', function() {
        it('should call updateprofiles successfully', function(done) {
          // TODO: uncomment, update parameter values for updateprofiles call
          /*
          var profilesId = "profilesId_example";
          var body = new Tielin.Profiles();
          body.id = 0;
          body.isRobot = false;
          body.name = "";
          body.waifuImageUrl = "";
          body.hearts = 0;
          body.implants = 0;

          instance.updateprofiles(profilesId, body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
