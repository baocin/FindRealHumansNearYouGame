/*
 * TIELIN
 * Tech is evil Love is not
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.9
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Likes', 'model/PickupLines', 'model/Profiles'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Likes'), require('../model/PickupLines'), require('../model/Profiles'));
  } else {
    // Browser globals (root is window)
    if (!root.Tielin) {
      root.Tielin = {};
    }
    root.Tielin.DefaultApi = factory(root.Tielin.ApiClient, root.Tielin.Likes, root.Tielin.PickupLines, root.Tielin.Profiles);
  }
}(this, function(ApiClient, Likes, PickupLines, Profiles) {
  'use strict';

  /**
   * Default service.
   * @module api/DefaultApi
   * @version 1.0.0
   */

  /**
   * Constructs a new DefaultApi. 
   * @alias module:api/DefaultApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the createlikes operation.
     * @callback module:api/DefaultApi~createlikesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a likes
     * Creates a new instance of a `likes`.
     * @param {module:model/Likes} body A new `likes` to be created.
     * @param {module:api/DefaultApi~createlikesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.createlikes = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createlikes");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/likes', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createpickupLines operation.
     * @callback module:api/DefaultApi~createpickupLinesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a pickup_lines
     * Creates a new instance of a `pickup_lines`.
     * @param {module:model/PickupLines} body A new `pickup_lines` to be created.
     * @param {module:api/DefaultApi~createpickupLinesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.createpickupLines = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createpickupLines");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/pickup_lines', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createprofiles operation.
     * @callback module:api/DefaultApi~createprofilesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a profiles
     * Creates a new instance of a `profiles`.
     * @param {module:model/Profiles} body A new `profiles` to be created.
     * @param {module:api/DefaultApi~createprofilesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.createprofiles = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createprofiles");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/profiles', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deletelikes operation.
     * @callback module:api/DefaultApi~deletelikesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a likes
     * Deletes an existing `likes`.
     * @param {String} likesId A unique identifier for a `likes`.
     * @param {module:api/DefaultApi~deletelikesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deletelikes = function(likesId, callback) {
      var postBody = null;

      // verify the required parameter 'likesId' is set
      if (likesId === undefined || likesId === null) {
        throw new Error("Missing the required parameter 'likesId' when calling deletelikes");
      }


      var pathParams = {
        'likesId': likesId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/likes/{likesId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deletepickupLines operation.
     * @callback module:api/DefaultApi~deletepickupLinesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a pickup_lines
     * Deletes an existing `pickup_lines`.
     * @param {String} pickupLinesId A unique identifier for a `pickup_lines`.
     * @param {module:api/DefaultApi~deletepickupLinesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deletepickupLines = function(pickupLinesId, callback) {
      var postBody = null;

      // verify the required parameter 'pickupLinesId' is set
      if (pickupLinesId === undefined || pickupLinesId === null) {
        throw new Error("Missing the required parameter 'pickupLinesId' when calling deletepickupLines");
      }


      var pathParams = {
        'pickup_linesId': pickupLinesId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/pickup_lines/{pickup_linesId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteprofiles operation.
     * @callback module:api/DefaultApi~deleteprofilesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a profiles
     * Deletes an existing `profiles`.
     * @param {String} profilesId A unique identifier for a `profiles`.
     * @param {module:api/DefaultApi~deleteprofilesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteprofiles = function(profilesId, callback) {
      var postBody = null;

      // verify the required parameter 'profilesId' is set
      if (profilesId === undefined || profilesId === null) {
        throw new Error("Missing the required parameter 'profilesId' when calling deleteprofiles");
      }


      var pathParams = {
        'profilesId': profilesId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/profiles/{profilesId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getalllikes operation.
     * @callback module:api/DefaultApi~getalllikesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Likes>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List All likes
     * Gets a list of all `likes` entities.
     * @param {module:api/DefaultApi~getalllikesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Likes>}
     */
    this.getalllikes = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = [Likes];

      return this.apiClient.callApi(
        '/likes', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getallpickupLines operation.
     * @callback module:api/DefaultApi~getallpickupLinesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PickupLines>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List All pickup_lines
     * Gets a list of all `pickup_lines` entities.
     * @param {module:api/DefaultApi~getallpickupLinesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PickupLines>}
     */
    this.getallpickupLines = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = [PickupLines];

      return this.apiClient.callApi(
        '/pickup_lines', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getallprofiles operation.
     * @callback module:api/DefaultApi~getallprofilesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Profiles>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List All profiles
     * Gets a list of all `profiles` entities.
     * @param {module:api/DefaultApi~getallprofilesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Profiles>}
     */
    this.getallprofiles = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = [Profiles];

      return this.apiClient.callApi(
        '/profiles', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getlikes operation.
     * @callback module:api/DefaultApi~getlikesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Likes} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a likes
     * Gets the details of a single instance of a `likes`.
     * @param {String} likesId A unique identifier for a `likes`.
     * @param {module:api/DefaultApi~getlikesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Likes}
     */
    this.getlikes = function(likesId, callback) {
      var postBody = null;

      // verify the required parameter 'likesId' is set
      if (likesId === undefined || likesId === null) {
        throw new Error("Missing the required parameter 'likesId' when calling getlikes");
      }


      var pathParams = {
        'likesId': likesId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = Likes;

      return this.apiClient.callApi(
        '/likes/{likesId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getpickupLines operation.
     * @callback module:api/DefaultApi~getpickupLinesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PickupLines} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a pickup_lines
     * Gets the details of a single instance of a `pickup_lines`.
     * @param {String} pickupLinesId A unique identifier for a `pickup_lines`.
     * @param {module:api/DefaultApi~getpickupLinesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PickupLines}
     */
    this.getpickupLines = function(pickupLinesId, callback) {
      var postBody = null;

      // verify the required parameter 'pickupLinesId' is set
      if (pickupLinesId === undefined || pickupLinesId === null) {
        throw new Error("Missing the required parameter 'pickupLinesId' when calling getpickupLines");
      }


      var pathParams = {
        'pickup_linesId': pickupLinesId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = PickupLines;

      return this.apiClient.callApi(
        '/pickup_lines/{pickup_linesId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getprofiles operation.
     * @callback module:api/DefaultApi~getprofilesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Profiles} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a profiles
     * Gets the details of a single instance of a `profiles`.
     * @param {String} profilesId A unique identifier for a `profiles`.
     * @param {module:api/DefaultApi~getprofilesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Profiles}
     */
    this.getprofiles = function(profilesId, callback) {
      var postBody = null;

      // verify the required parameter 'profilesId' is set
      if (profilesId === undefined || profilesId === null) {
        throw new Error("Missing the required parameter 'profilesId' when calling getprofiles");
      }


      var pathParams = {
        'profilesId': profilesId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = Profiles;

      return this.apiClient.callApi(
        '/profiles/{profilesId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updatelikes operation.
     * @callback module:api/DefaultApi~updatelikesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a likes
     * Updates an existing `likes`.
     * @param {String} likesId A unique identifier for a `likes`.
     * @param {module:model/Likes} body Updated `likes` information.
     * @param {module:api/DefaultApi~updatelikesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.updatelikes = function(likesId, body, callback) {
      var postBody = body;

      // verify the required parameter 'likesId' is set
      if (likesId === undefined || likesId === null) {
        throw new Error("Missing the required parameter 'likesId' when calling updatelikes");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updatelikes");
      }


      var pathParams = {
        'likesId': likesId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/likes/{likesId}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updatepickupLines operation.
     * @callback module:api/DefaultApi~updatepickupLinesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a pickup_lines
     * Updates an existing `pickup_lines`.
     * @param {String} pickupLinesId A unique identifier for a `pickup_lines`.
     * @param {module:model/PickupLines} body Updated `pickup_lines` information.
     * @param {module:api/DefaultApi~updatepickupLinesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.updatepickupLines = function(pickupLinesId, body, callback) {
      var postBody = body;

      // verify the required parameter 'pickupLinesId' is set
      if (pickupLinesId === undefined || pickupLinesId === null) {
        throw new Error("Missing the required parameter 'pickupLinesId' when calling updatepickupLines");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updatepickupLines");
      }


      var pathParams = {
        'pickup_linesId': pickupLinesId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/pickup_lines/{pickup_linesId}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateprofiles operation.
     * @callback module:api/DefaultApi~updateprofilesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a profiles
     * Updates an existing `profiles`.
     * @param {String} profilesId A unique identifier for a `profiles`.
     * @param {module:model/Profiles} body Updated `profiles` information.
     * @param {module:api/DefaultApi~updateprofilesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.updateprofiles = function(profilesId, body, callback) {
      var postBody = body;

      // verify the required parameter 'profilesId' is set
      if (profilesId === undefined || profilesId === null) {
        throw new Error("Missing the required parameter 'profilesId' when calling updateprofiles");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateprofiles");
      }


      var pathParams = {
        'profilesId': profilesId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/profiles/{profilesId}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
